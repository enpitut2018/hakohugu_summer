<h1>CoMony</h1>
<h3>ToDoリスト</h3>
<p>完了したタスクにチェックを入れましょう</p>
<form action="/pages/home" method="get">
  <div class="field">
    <% %w(バンドの練習 英語の勉強 ランニング).each.with_index do |list,i| %>
      <%if @todo
      flag=0
      @todo.each do |j|
        if j==list
          flag=1
          break
        end
      end

      if flag==1%>
        <%=check_box_tag 'todo[]',list ,{:checked => true},id:"samurai_ingredients_#{i}"%>
      <%else%>
        <%= check_box_tag 'todo[]',list ,false,id:"samurai_ingredients_#{i}"%>
      <%end%>
    <% else%>
      <%= check_box_tag 'todo[]',list ,false,id:"samurai_ingredients_#{i}"%>
    <%end%>

    <label>

      <%= list %>
      <br>
    </label>
    <% end %>
  </div>
  <%#= @todo%>
  <input type="submit" id="sub"   value="チェックしたタスクを完了する"  disabled="disabled">
</form>
<p>一緒に作業する仲間との距離が近くなると上の完了ボタンを押せるようになります。</p>
<div id="result"></div>
<%# /* function syori(){
*   var x;
*   x = document.getElementById("sub");

*   x.disabled = "";
* }
* var x;
* x = document.getElementById("sub");

* x.disabled = "disabled";*/ %>


<script>
 window.onload=getPosition();
 /* window.onload=document.getElementById("sub").disabled = "disabled";*/
 var distance;
 var syncerWatchPosition = {
   count: 0 ,
   lastTime: 0 ,
   map: null ,
   marker: null ,
 } ;

 var optionObj = {
   "enableHighAccuracy": true ,
   "timeout": 1000000 ,
   "maximumAge": 0 ,
 } ;
 // Geolocation APIに対応している
 if (navigator.geolocation) {
   /* alert("この端末では位置情報が取得できます");*/
   // Geolocation APIに対応していない
 } else {
   alert("この端末では位置情報が取得できません");
 }

 // 現在地取得処理
 function getPosition() {
   // 現在地を取得
   navigator.geolocation.watchPosition(
     // 取得成功した場合
     function(position) {
       // データの更新
       ++syncerWatchPosition.count ;					// 処理回数
       var nowTime = ~~( new Date() / 1000 ) ;	// UNIX Timestamp

       // 前回の書き出しから3秒以上経過していたら描写
       // 毎回HTMLに書き出していると、ブラウザがフリーズするため
       if( (syncerWatchPosition.lastTime + 0.5) > nowTime )
	     {
	       return false ;
	     }

       // 前回の時間を更新
       syncerWatchPosition.lastTime = nowTime ;




       /* alert('緯度'+position.coords.latitude +'経度'+ position.coords.longitude);*/
       var x=position.coords.latitude;
       var y=position.coords.longitude;
       var xd=36.1102533;
       var yd=140.1007939;
       distance = getDistance(x,y,xd,yd);
       if(distance <= 0.005){
         var x;
         x = document.getElementById("sub");
         x.disabled = "";
       }
       else{
         var x;
         x = document.getElementById("sub");
         x.disabled = "disabled";
       }
       // HTMLに書き出し
		      /*document.getElementById( 'result' ).innerHTML = '<dt>緯度</dt><dd>' + position.coords.latitude + '</dd><dt>経度</dt><dd>' + position.coords.longitude + '</dd><dt>高度</dt><dd>' + position.coords.altitude + '</dd><dt>速度</dt><dd>' + position.coords.speed + '</dd><dt>実行回数</dt><dd>' + syncerWatchPosition.count + '回' + '</dd><dt>距離(km)</dt><dd>' + distance + '</dd>';*/

		      
		      document.getElementById( 'result' ).innerHTML = '<dt>距離(km)</dt><dd>' + distance + '</dd>';
		      
     },
     // 取得失敗した場合
     function(error) {
       switch(error.code) {
         case 1: //PERMISSION_DENIED
           alert("位置情報の利用が許可されていません");
           break;
         case 2: //POSITION_UNAVAILABLE
           alert("現在位置が取得できませんでした");
           break;
         case 3: //TIMEOUT
           alert("タイムアウトになりました");
           break;
         default:
           alert("その他のエラー(エラーコード:"+error.code+")");
           break;
       }
     },
     optionObj
   );
 }

 function getDistance(lat1, lng1, lat2, lng2){

   var x1 =parseFloat(lat1) * Math.PI / 180;
   var y1 =parseFloat(lng1) * Math.PI / 180;
   var x2 =parseFloat(lat2)* Math.PI / 180;
   var y2 =parseFloat(lng2) * Math.PI / 180;


   var radius = 6378.137;


   var diff_y = Math.abs(y1 - y2);

   var calc1 = Math.cos(x2) * Math.sin(diff_y);
   var calc2 = Math.cos(x1) * Math.sin(x2) - Math.sin(x1) * Math.cos(x2) * Math.cos(diff_y);


   var numerator = Math.sqrt(calc1 ** 2 + calc2 ** 2)


   var denominator = Math.sin(x1) * Math.sin(x2) + Math.cos(x1) * Math.cos(x2) * Math.cos(diff_y);


   var degree = Math.atan2(numerator, denominator);


   return degree * radius;
 }



</script>
